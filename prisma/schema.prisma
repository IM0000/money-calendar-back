generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int                                 @id @default(autoincrement())
  email                  String                              @unique
  password               String? // 이메일 로그인 사용자의 경우 사용 (OAuth만 사용하면 null 가능)
  nickname               String?
  verified               Boolean                             @default(false) // 인증 관련 추가 필드
  currentHashedRefreshToken  String?
  oauthAccounts          OAuthAccount[] // 기존 OAuthAccount / OauthInfo 통합
  favoriteEarnings       FavoriteEarnings[]
  favoriteDividends      FavoriteDividends[]
  favoriteIndicators     FavoriteIndicator[]
  notificationSettings   UserNotificationSettings?
  notifications          Notification[]

  subscriptionEarnings   SubscriptionEarnings[]
  subscriptionIndicator  SubscriptionIndicator[]

  createdAt              DateTime                            @default(now())
  updatedAt              DateTime                            @updatedAt
}

model UserNotificationSettings {
  id              Int      @id @default(autoincrement())
  userId          Int      @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailEnabled    Boolean  @default(false)
  slackEnabled    Boolean  @default(false)
  slackWebhookUrl String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model OAuthAccount {
  id           Int       @id @default(autoincrement())
  provider     String    // 'google', 'kakao', 'apple', 'discord', 등
  providerId   String    // OAuth 제공자가 제공하는 고유 ID
  oauthEmail   String?
  accessToken  String?   // OAuth 관련 access token (OauthInfo 필드)
  refreshToken String?   // refresh token
  tokenExpiry  DateTime? // token 만료일
  userId       Int
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([provider, providerId])
}

model VerificationCode {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  email     String
  expiresAt DateTime
}

model Company {
  id          Int        @id @default(autoincrement())
  ticker      String
  name        String
  country     String
  marketValue String     @default("")
  earnings    Earnings[]
  dividends   Dividend[]
  subscriptionEarnings SubscriptionEarnings[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([ticker, country])
}

enum ReleaseTiming {
  UNKNOWN
  PRE_MARKET
  POST_MARKET
}

model Earnings {
  id              Int                                @id @default(autoincrement())
  country         String // 국가
  releaseDate     BigInt // 발표 날짜 (밀리초 단위)
  releaseTiming   ReleaseTiming                      @default(UNKNOWN)
  actualEPS       String // 실제 EPS
  forecastEPS     String // 예측 EPS
  previousEPS     String // 이전 EPS
  actualRevenue   String // 실제 매출
  forecastRevenue String // 예측 매출
  previousRevenue String // 이전 매출
  companyId       Int
  company         Company                            @relation(fields: [companyId], references: [id])
  favorites       FavoriteEarnings[]
  subscriptionEarnings SubscriptionEarnings[]
  // No direct relation to Notification - will be accessed through contentType/contentId
  createdAt       DateTime                           @default(now())
  updatedAt       DateTime                           @updatedAt

  @@unique([releaseDate, companyId])
}

model Dividend {
  id                     Int                 @id @default(autoincrement())
  country                String // 국가
  exDividendDate         BigInt // 배당락일 (밀리초 단위)
  dividendAmount         String // 배당금
  previousDividendAmount String // 이전 배당금
  paymentDate            BigInt // 배당 지급일 (밀리초 단위)
  dividendYield          String // 배당 수익률
  companyId              Int
  company                Company             @relation(fields: [companyId], references: [id])
  favorites              FavoriteDividends[]
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt

  @@unique([exDividendDate, companyId])
}

model EconomicIndicator {
  id            Int                                 @id @default(autoincrement())
  country       String // 국가
  releaseDate   BigInt // 발표 날짜 (밀리초 단위)
  name          String // 지표 이름
  baseName      String // 날짜제거된 지표 이름
  importance    Int // 중요도 (예: 1~5 스케일)
  actual        String // 실제 값
  forecast      String // 예측 값
  previous      String // 이전 값
  favorites     FavoriteIndicator[]
  subscriptionIndicator SubscriptionIndicator[]

  createdAt     DateTime                            @default(now())
  updatedAt     DateTime                            @updatedAt

  @@unique([releaseDate, name, country])
}

model FavoriteEarnings {
  userId     Int
  earningsId Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  earnings   Earnings @relation(fields: [earningsId], references: [id])

  @@id([userId, earningsId])
}

model FavoriteDividends {
  userId     Int
  dividendId Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  dividend   Dividend @relation(fields: [dividendId], references: [id])

  @@id([userId, dividendId])
}

model FavoriteIndicator {
  userId      Int
  indicatorId Int
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  indicator   EconomicIndicator @relation(fields: [indicatorId], references: [id])

  @@id([userId, indicatorId])
}

enum ContentType {
  EARNINGS
  DIVIDEND
  ECONOMIC_INDICATOR
}

model SubscriptionEarnings {
  id            Int      @id @default(autoincrement())
  userId        Int
  companyId     Int?     // Company 전체 구독을 위해 추가
  earningsId    Int?     // 개별 실적 ID 구독용
  subscribedAt  DateTime @default(now())
  isActive      Boolean  @default(true)

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  company       Company?  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  earnings      Earnings? @relation(fields: [earningsId], references: [id], onDelete: Cascade)

  @@unique([userId, earningsId])
  @@unique([userId, companyId])
  @@index([earningsId, isActive])
  @@index([companyId, isActive])
}

model SubscriptionIndicator {
  id            Int                  @id @default(autoincrement())
  userId        Int
  baseName      String?              // ex: 'CPI', 'PPI' 등
  country       String?              // ex: 'US', null이면 국가 무관
  indicatorId   Int?                 // 개별 지표 ID 구독용
  subscribedAt  DateTime             @default(now())
  isActive      Boolean              @default(true)

  user          User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  indicator     EconomicIndicator?   @relation(fields: [indicatorId], references: [id], onDelete: Cascade)

  @@unique([userId, indicatorId])
  @@unique([userId, baseName, country])
  @@index([indicatorId, isActive])
  @@index([baseName, country, isActive])
}

enum NotificationChannel {
  EMAIL
  SLACK
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
}

model Notification {
  id            Int       @id @default(autoincrement())
  userId        Int
  contentType   ContentType
  contentId     Int
  isRead        Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  notificationDelivery NotificationDelivery[]
  
  @@index([userId, isRead])
  @@index([contentType, contentId])
}

model NotificationDelivery {
  id                Int       @id @default(autoincrement())
  notificationId    Int
  channelKey        NotificationChannel
  status            NotificationStatus
  errorMessage      String?
  deliveredAt       DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  notification      Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@index([notificationId])
  @@index([status])
}