generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          Int                          @id @default(autoincrement())
  email                       String                       @unique
  password                    String?
  nickname                    String?
  verified                    Boolean                      @default(false)
  currentHashedRefreshToken   String?
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  favoriteCompanies           FavoriteCompany[]
  favoriteIndicatorGroups     FavoriteIndicatorGroup[]
  notifications               Notification[]
  oauthAccounts               OAuthAccount[]
  subscriptionCompanies       SubscriptionCompany[]
  subscriptionIndicatorGroups SubscriptionIndicatorGroup[]
  notificationSettings        UserNotificationSettings?
}

model UserNotificationSettings {
  id                   Int      @id @default(autoincrement())
  userId               Int      @unique
  emailEnabled         Boolean  @default(false)
  slackEnabled         Boolean  @default(false)
  slackWebhookUrl      String?
  notificationsEnabled Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OAuthAccount {
  id           Int       @id @default(autoincrement())
  provider     String
  providerId   String
  oauthEmail   String?
  accessToken  String?
  refreshToken String?
  tokenExpiry  DateTime?
  userId       Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
}

model VerificationCode {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  email     String
  expiresAt DateTime
}

model Company {
  id                    Int                   @id @default(autoincrement())
  ticker                String
  name                  String
  country               String
  marketValue           String                @default("")
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  dividends             Dividend[]
  earnings              Earnings[]
  favoriteCompanies     FavoriteCompany[]
  subscriptionCompanies SubscriptionCompany[]

  @@unique([ticker, country])
}

model Earnings {
  id              Int           @id @default(autoincrement())
  country         String
  releaseDate     BigInt
  releaseTiming   ReleaseTiming @default(UNKNOWN)
  actualEPS       String
  forecastEPS     String
  previousEPS     String
  actualRevenue   String
  forecastRevenue String
  previousRevenue String
  companyId       Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  company         Company       @relation(fields: [companyId], references: [id])

  @@unique([releaseDate, companyId])
}

model Dividend {
  id                     Int      @id @default(autoincrement())
  country                String
  exDividendDate         BigInt
  dividendAmount         String
  previousDividendAmount String
  paymentDate            BigInt
  dividendYield          String
  companyId              Int
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  company                Company  @relation(fields: [companyId], references: [id])

  @@unique([exDividendDate, companyId])
}

model EconomicIndicator {
  id          Int      @id @default(autoincrement())
  country     String
  releaseDate BigInt
  name        String
  baseName    String?
  importance  Int
  actual      String
  forecast    String
  previous    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([releaseDate, name, country])
  @@index([baseName, country])
}

model FavoriteCompany {
  id          Int      @id @default(autoincrement())
  userId      Int
  companyId   Int
  favoritedAt DateTime @default(now())
  isActive    Boolean  @default(true)
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
  @@index([companyId, isActive])
}

model FavoriteIndicatorGroup {
  id          Int      @id @default(autoincrement())
  userId      Int
  baseName    String
  country     String?
  favoritedAt DateTime @default(now())
  isActive    Boolean  @default(true)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, baseName, country])
  @@index([baseName, country, isActive])
}

model SubscriptionCompany {
  id           Int      @id @default(autoincrement())
  userId       Int
  companyId    Int
  subscribedAt DateTime @default(now())
  isActive     Boolean  @default(true)
  company      Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
  @@index([companyId, isActive])
}

model SubscriptionIndicatorGroup {
  id           Int      @id @default(autoincrement())
  userId       Int
  baseName     String
  country      String?
  subscribedAt DateTime @default(now())
  isActive     Boolean  @default(true)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, baseName, country])
  @@index([baseName, country, isActive])
}

model Notification {
  id                   Int                    @id @default(autoincrement())
  userId               Int
  contentType          ContentType
  contentId            Int
  isRead               Boolean                @default(false)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  notificationType     NotificationType       @default(DATA_CHANGED)
  user                 User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  notificationDelivery NotificationDelivery[]

  @@index([userId, isRead])
  @@index([contentType, contentId])
}

model NotificationDelivery {
  id               Int                 @id @default(autoincrement())
  notificationId   Int
  channelKey       NotificationChannel
  status           NotificationStatus
  errorMessage     String?
  deliveredAt      DateTime?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  errorCode        String?
  lastAttemptAt    DateTime?
  processingTimeMs Int?
  retryCount       Int                 @default(0)
  notification     Notification        @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@index([notificationId])
  @@index([status])
  @@index([channelKey, status])
}

enum ReleaseTiming {
  UNKNOWN
  PRE_MARKET
  POST_MARKET
}

enum ContentType {
  EARNINGS
  DIVIDEND
  ECONOMIC_INDICATOR
}

enum NotificationChannel {
  EMAIL
  SLACK
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
}

enum NotificationType {
  DATA_CHANGED
  PAYMENT_DATE
  RELEASE_DATE
}
